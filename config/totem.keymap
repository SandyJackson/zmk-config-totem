//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄


#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include "zmk-helpers/helper.h"

// Source desired key-position labels
#include "zmk-helpers/key-labels/totem.h"

// Customise build and behaviour timings
// HOLDING_TIME
#define HRM_TAPPING_TERM      400
// REPEAT DECAY
#define HRM_QUICK_TAP         175
// STREAK DECAY
#define HRM_PRIOR_IDLE        150
#define LT_QUICK_TAP          175
#define SS_QUICK_TAP          175
#define STICKY_KEY_RELEASE_MS 2000
#undef  COMBO_TERM
#define COMBO_TERM            50
#define COMBO_PRIOR_IDLE      50
#define HOLD_TAP_TAPPING_TERM 200

/* Layer Definitions */
#define BASE  0
#define ALT   1
#define ALT2  2
#define ALT3  3
#define NAV   4
#define MEDIA 5
#define NUM   6
#define SYM   7
#define FUN   8

/* define shortcodes for unused keys per layer */
#define XXX &none
#define ___ &trans

/* Functions for clipboard - mac specific */
#define U_RDO &kp LS(LG(Z))
#define U_PST &kp LG(V)
#define U_CPY &kp LG(C)
#define U_CUT &kp LG(X)
#define U_UND &kp LG(Z)

/* Customise default behaviours */
&mt {
  tapping-term-ms = <HOLD_TAP_TAPPING_TERM>;
  flavor = "balanced";
};

&lt {
  tapping-term-ms = <HOLD_TAP_TAPPING_TERM>;
  quick-tap-ms = <LT_QUICK_TAP>;
  flavor = "tap-preferred";
};

/* Homerow mods */
#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4 LB5
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4 LB5
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2

#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS)                                 \
  ZMK_HOLD_TAP(NAME, bindings = <HOLD>, <TAP>; flavor = "balanced";            \
               tapping-term-ms = <HRM_TAPPING_TERM>; quick-tap-ms = <HRM_QUICK_TAP>;         \
               require-prior-idle-ms = <HRM_PRIOR_IDLE>; hold-trigger-on-release;         \
               hold-trigger-key-positions = <TRIGGER_POS>;)

MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS) // Left-hand HRMs.
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS) // Right-hand HRMs.

// Tap: repeat after alpha, else sticky-shift |
// Shift + tap/ double-tap: caps-word | Hold: shift.
#define MAGIC_SHIFT &magic_shift LSHFT 0
ZMK_HOLD_TAP(magic_shift, bindings = <&kp>, <&magic_shift_tap>;
             flavor = "balanced"; tapping-term-ms = <200>;
             quick-tap-ms = <SS_QUICK_TAP>;)
ZMK_MOD_MORPH(magic_shift_tap, bindings = <&shift_repeat>, <&caps_word>;
              mods = <(MOD_LSFT)>;)
ZMK_ADAPTIVE_KEY(
    shift_repeat, bindings = <&sk LSHFT>;
    repeat {
      trigger-keys = <A B C D E F G H I J K L M N O P Q R S T U V W X Y Z>;
      bindings = <&key_repeat>;
      max-prior-idle-ms = <1200>;
      strict-modifiers;
    };)
&caps_word { // Mods deactivate caps-word, requires PR #1451. [TODO: rebase]
  /delete-property/ ignore-modifiers;
};

#include "combos.dtsi"
/ {
        keymap {
                compatible = "zmk,keymap";

                base_layer {
label= "BASE"                              ;
  bindings = <
//╭──────────────┬──────────────┬──────────────┬──────────────┬──────────────╮   ╭──────────────┬──────────────┬──────────────┬──────────────┬──────────────╮
    &kp Q         &kp W          &kp E          &kp R          &kp T              &kp Y          &kp U          &kp I          &kp O          &kp P
//├──────────────┬──────────────┬──────────────┬──────────────┬──────────────╮   ╭──────────────┬──────────────┬──────────────┬──────────────┬──────────────╮
    &hml LSHFT A  &hml LALT S    &hml LCTRL D   &hml LGUI F    &hml LS(LC(LALT)) G  &hmr LS(LC(LALT)) H  &hmr LGUI J    &hmr LCTRL K   &hmr LALT L    &hmr LSHFT SQT
//├──────────────┬──────────────┬──────────────┬──────────────┬──────────────╮   ╭──────────────┬──────────────┬──────────────┬──────────────┬──────────────╮
    &kp ESC       &kp Z          &kp X          &kp C          &kp V              &kp B          &kp N          &kp M          &kp COMMA      &kp DOT        &kp SLASH      &kp LS(LC(LA(TAB)))
//                                ╭──────────────┬──────────────┬──────────────╮   ╭──────────────┬──────────────┬──────────────╮
                                  &lt NUM ESC  &lt NAV BSPC   MAGIC_SHIFT            &lt MEDIA RET    &lt SYM SPACE  &mt LS(LC(LALT)) TAB
//                                ╰──────────────┴──────────────┴──────────────╯   ╰──────────────┴──────────────┴──────────────╯
  >;
                };

                alt_layer {
label= "ALT"                              ;
  bindings = <
/* Gallium Colstag https://github.com/GalileoBlues/Gallium */
//╭──────────────┬──────────────┬──────────────┬──────────────┬──────────────╮   ╭──────────────┬──────────────┬──────────────┬──────────────┬──────────────╮
    &kp B         &kp L          &kp D          &kp C          &kp V              &kp J          &kp Y          &kp O          &kp U          &kp COMMA
//├──────────────┬──────────────┬──────────────┬──────────────┬──────────────╮   ╭──────────────┬──────────────┬──────────────┬──────────────┬──────────────╮
    &hml LSHFT N  &hml LALT R    &hml LCTRL T   &hml LGUI S    &hml LS(LC(LALT)) G  &hmr LS(LC(LALT)) P  &hmr LGUI H    &hmr LCTRL A   &hmr LALT E    &hmr LSHFT I
//├──────────────┬──────────────┬──────────────┬──────────────┬──────────────╮   ╭──────────────┬──────────────┬──────────────┬──────────────┬──────────────╮
    &kp ESC       &kp X          &kp Q          &kp M          &kp W              &kp Z          &kp K          &kp F          &kp SQT      &kp SEMICOLON        &kp DOT      &kp LS(LC(LA(TAB)))
//                                ╭──────────────┬──────────────┬──────────────╮   ╭──────────────┬──────────────┬──────────────╮
                                  &lt MEDIA ESC  &lt NAV BSPC   MAGIC_SHIFT            &lt SYM RET    &lt NUM SPACE  &mt LS(LC(LALT)) TAB
//                                ╰──────────────┴──────────────┴──────────────╯   ╰──────────────┴──────────────┴──────────────╯
  >;
                };

                alt2_layer {
label= "ALT2"                              ;
bindings = <
/* Engrammer https://github.com/sunaku/engrammer */
//╭──────────────┬──────────────┬──────────────┬──────────────┬──────────────╮   ╭──────────────┬──────────────┬──────────────┬──────────────┬──────────────╮
&kp B         &kp Y          &kp O          &kp U          &kp SQT              &kp SEMICOLON     &kp L          &kp D          &kp W          &kp V
//├──────────────┬──────────────┬──────────────┬──────────────┬──────────────╮   ╭──────────────┬──────────────┬──────────────┬──────────────┬──────────────╮
&hml LSHFT C  &hml LALT I    &hml LCTRL E   &hml LGUI A    &hml LS(LC(LALT)) COMMA  &hmr LS(LC(LALT)) DOT  &hmr LGUI H    &hmr LCTRL T   &hmr LALT S    &hmr LSHFT N
//├──────────────┬──────────────┬──────────────┬──────────────┬──────────────╮   ╭──────────────┬──────────────┬──────────────┬──────────────┬──────────────╮
&kp Z       &kp G          &kp X          &kp J          &kp K              &kp MINUS          &kp SLASH          &kp R          &kp M      &kp F        &kp P      &kp Q
//                                ╭──────────────┬──────────────┬──────────────╮   ╭──────────────┬──────────────┬──────────────╮
                  &lt MEDIA ESC  &lt NAV BSPC   MAGIC_SHIFT            &lt SYM RET    &lt NUM SPACE  &mt LS(LC(LALT)) TAB
//                                ╰──────────────┴──────────────┴──────────────╯   ╰──────────────┴──────────────┴──────────────╯
>;
};
alt3_layer {
label= "ALT3"                              ;
bindings = <
/* Enthium https://github.com/sunaku/enthium */
/*   q y u o / x l d w z */
/* b c i e a , k h t n s v */
/*   ' - = . ; j m g p f */
/*             r */
//    ╭──────────────┬──────────────┬──────────────┬──────────────┬──────────────╮          ╭──────────────┬──────────────┬──────────────┬──────────────┬──────────────╮
      &kp Q         &kp Y           &kp U          &kp O          &kp SLASH                  &kp X     &kp L          &kp D          &kp W          &kp Z
//    ├──────────────┬──────────────┬──────────────┬──────────────┬──────────────╮          ╭──────────────┬──────────────┬──────────────┬──────────────┬──────────────╮
      &hml LSHFT C  &hml LALT I     &hml LCTRL E   &hml LGUI A    &hml LS(LC(LALT)) COMMA    &hmr LS(LC(LALT)) K  &hmr LGUI H    &hmr LCTRL T   &hmr LALT N    &hmr LSHFT S
//    ├──────────────┬──────────────┬──────────────┬──────────────┬──────────────╮          ╭──────────────┬──────────────┬──────────────┬──────────────┬──────────────╮
&kp B &kp SQT       &kp MINUS       &kp EQUAL      &kp DOT         &kp SEMICOLON             &kp J          &kp M          &kp G      &kp P        &kp F      &kp V
//                                ╭──────────────┬──────────────┬──────────────╮            ╭──────────────┬──────────────┬──────────────╮
                                   &lt NUM ESC    &lt NAV BSPC   MAGIC_SHIFT                 &lt MEDIA RET  &lt SYM SPACE  &kp R
//                                ╰──────────────┴──────────────┴──────────────╯            ╰──────────────┴──────────────┴──────────────╯
>;
};
                nav_layer {
// ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
label= "NAV"                              ;
// ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
  bindings = <
//  ╭──────────────┬──────────────┬──────────────┬──────────────┬──────────────╮       ╭──────────────┬──────────────┬──────────────┬──────────────┬──────────────╮
      &kp RET       &kp SPACE     &kp TAB        &kp BSPC       &kp LG(X)               &kp LC(LS(TAB)) &kp LG(Z)     &kp LG(LS(Z))  &kp LC(TAB)     &kp LG(X)
      &kp LSHFT     &kp LALT      &kp LCTRL      &kp LGUI       &mt LS(LC(LALT)) LG(C)  &kp LEFT        &kp DOWN      &kp UP         &kp RIGHT       &kp LG(C)
XXX   XXX           XXX           &kp RALT       XXX            XXX                     &kp LG(LEFT)    &kp LPAR      &kp RPAR       &kp LG(RIGHT)   &kp LG(V)    &kp LG(A)
                                XXX           XXX           XXX                       &kp RET         &kp BSPC       &kp TAB
//                               ╰──────────────┴──────────────┴──────────────╯         ╰──────────────┴──────────────┴──────────────╯
                         >;
                };

                media_layer {
// ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
label= "MEDIA"                               ;
// ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
  bindings = <
    // ┌─────────────┬─────────────┬─────────────┬─────────────┬─────────────┐   ┌─────────────┬─────────────┬─────────────┬─────────────┬─────────────┐
    // │             │             │             │             │             │   │             │             │             │             │             │
        XXX    &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC    XXX        XXX         XXX         XXX           XXX           XXX             XXX
    //  ├─────────────┼─────────────┼─────────────┼─────────────┼────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    //  │  PREV       │  VOL DOWN   │  VOL UP     │  NEXT       │            │   │             │             │             │             │             │
        &kp C_PREV    &kp C_VOL_DN  &kp C_VOL_UP  &kp C_NEXT    XXX                XXX              XXX       XXX             XXX             XXX
    //  ├─────────────┼─────────────┼─────────────┼─────────────┼────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    //  │  BT 0       │  BT 1       │  BT 2       │  BT 3       │  OUT TOGGLE│   │             │             │             │             │             │
XXX       &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &out OUT_TOG    XXX              XXX       XXX             XXX             XXX          XXX
    //  ├─────────────┼─────────────┼─────────────┴─────────────┴────────────┤   ├─────────────┼─────────────┼─────────────┴─────────────┴─────────────┘
    //                              │  STOP       │  PLAY/PAUSE │  MUTE      │   │             │             │
                                       &kp C_STOP    &kp C_PP      &kp C_MUTE     XXX          XXX          XXX
    //                              └────────────┴─────────────┴─────────────┘   └─────────────┴─────────────┴─────────────┘
  >;
                };

                number_layer {
// ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
label= "NUM"                               ;
// ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
 bindings = <
         &kp RET    &kp SPACE   &kp TAB    &kp BSPC     &kp LG(X)                  &kp LS(G)  &kp N7    &kp N8    &kp N9    &kp LS(SEMI)
         &kp LSHFT  &kp LALT    &kp LCTRL  &kp LGUI     &mt LS(LC(LALT)) LG(C)     &kp K      &kp N4    &kp N5    &kp N6    &kp MINUS
&kp HASH &kp LPAR   &kp PERCENT &kp PLUS   &kp ASTRK    &kp RPAR                   &kp J      &kp N1    &kp N2    &kp N3    &kp SLASH   &kp LS(EQUAL)
                                     XXX       XXX           XXX                   &kp COMMA  &kp N0    &kp DOT
                        >;
                };


                symbol_layer {
// ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
label= "SYM"                             ;
// ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
 bindings = <
            &kp EXCL       &kp LBRC  &kp RBRC       &kp TILDE         &kp QMARK          &kp GRAVE    &kp BSPC    &kp TAB   &kp SPACE   &kp RET
            &kp CARET      &kp EQUAL &kp UNDERSCORE &kp DOLLAR        &kp ASTRK          &kp LS(SQT)  &kp LGUI    &kp LCTRL &kp LALT    &kp LSHFT
  &kp HASH  &kp LESS_THAN  &kp PIPE  &kp MINUS      &kp GREATER_THAN  &kp BSLH           &kp SQT      &kp LBKT    &kp RBKT  &kp LPAR    &kp RPAR XXX
                                       &kp PERCENT    &kp COLON         &kp AT             XXX      XXX      XXX
                        >;
                };

                function_layer {
// ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
label= "FUN"                             ;
// ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
 bindings = <
  &kp F12     &kp F7    &kp F8    &kp F9    &kp PSCRN     XXX      XXX  XXX   XXX   XXX
  &kp F11     &kp F4    &kp F5    &kp F6    &kp SLCK      XXX      &kp LSHFT   &kp LCTRL   &kp LALT    &kp LGUI
  XXX &kp F10     &kp F1    &kp F2    &kp F3    &kp PAUSE_BREAK   XXX      XXX   XXX   &kp RALT    XXX XXX
              &kp K_APP   &kp SPACE   &kp TAB       XXX      XXX      XXX
                        >;
                };
        };
};
